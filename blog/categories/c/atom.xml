<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | Code::Chunks]]></title>
  <link href="http://codechunks.org/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://codechunks.org/"/>
  <updated>2013-02-12T16:35:31+00:00</updated>
  <id>http://codechunks.org/</id>
  <author>
    <name><![CDATA[Andrea Bernardo Ciddio]]></name>
    <email><![CDATA[bcandrea@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Makefile for the simplest shared library]]></title>
    <link href="http://codechunks.org/blog/2012/10/24/a-makefile-for-the-simplest-shared-library/"/>
    <updated>2012-10-24T17:00:00+01:00</updated>
    <id>http://codechunks.org/blog/2012/10/24/a-makefile-for-the-simplest-shared-library</id>
    <content type="html"><![CDATA[<p>The problem: writing a very simple Makefile to build a C shared library.
Let's say we have just coded the most wonderful library <code>foo</code>, which -- not too surprisingly -- has
greetings as its main purpose.</p>

<!-- more -->


<p><div><script src='https://gist.github.com/3947197.js?file=foo.h'></script>
<noscript><pre><code>#ifndef FOO_H
#define FOO_H

#include &lt;stdio.h&gt;

void say_hello();

#endif</code></pre></noscript></div>
</p>

<p><div><script src='https://gist.github.com/3947197.js?file=foo.c'></script>
<noscript><pre><code>#include &quot;foo.h&quot;

void say_hello() {
  printf(&quot;hello hello!\n&quot;);
}</code></pre></noscript></div>
</p>

<p>(Yeah, pretty impressive). We may also want to push it further, and test it using a quick C executable:</p>

<p><div><script src='https://gist.github.com/3947197.js?file=foo_test.c'></script>
<noscript><pre><code>#include &quot;foo.h&quot;

int main() {
  say_hello();
  return 0;
}</code></pre></noscript></div>
</p>

<p>Here's a simple Makefile with some nice features:</p>

<ul>
<li>the name and version of the library are just parameters</li>
<li>it creates a shared object with a proper soname</li>
<li>it compiles the library with debugging symbols, optimization and strict error checking</li>
</ul>


<p><div><script src='https://gist.github.com/3947197.js?file=basic.mk'></script>
<noscript><pre><code>CFLAGS := -fPIC -O3 -g -Wall -Werror
CC := gcc
MAJOR := 0
MINOR := 1
NAME := foo
VERSION := $(MAJOR).$(MINOR)

lib: lib$(NAME).so.$(VERSION)

lib$(NAME).so.$(VERSION): $(NAME).o
	$(CC) -shared -Wl,-soname,lib$(NAME).so.$(MAJOR) $^ -o $@

clean:
	$(RM) *.o *.so*</code></pre></noscript></div>
</p>

<p>Nice. But what about our little test program? Let's add some clutter to the minimal Makefile:</p>

<p><div><script src='https://gist.github.com/3947197.js?file=complete.mk'></script>
<noscript><pre><code>CFLAGS := -fPIC -O3 -g -Wall -Werror
CC := gcc
MAJOR := 0
MINOR := 1
NAME := foo
VERSION := $(MAJOR).$(MINOR)

lib: lib$(NAME).so.$(VERSION)

test: $(NAME)_test
	LD_LIBRARY_PATH=. ./$(NAME)_test

$(NAME)_test: lib$(NAME).so
	$(CC) $(NAME)_test.c -o $@ -L. -l$(NAME)

lib$(NAME).so: lib$(NAME).so.$(VERSION)
	ldconfig -v -n .
	ln -s lib$(NAME).so.$(MAJOR) lib$(NAME).so

lib$(NAME).so.$(VERSION): $(NAME).o
	$(CC) -shared -Wl,-soname,lib$(NAME).so.$(MAJOR) $^ -o $@

clean:
	$(RM) $(NAME)_test *.o *.so*</code></pre></noscript></div>
</p>

<p>The complete version has a <code>test</code> target which builds the <code>foo_test</code> executable (only if needed) and
launches it (always). There is an intermediate step (the one involving <code>ldconfig</code>) which takes care of
creating some symlinks needed to link against our <code>foo</code> library.</p>

<h2>References</h2>

<p><a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"> Program Library HOWTO </a> - The section about shared libraries</p>

<p><a href="http://www.ibm.com/developerworks/library/l-shobj/"> Shared objects for the object disoriented! </a> - Quite old (2001) but very informative article</p>

<p><a href="http://stackoverflow.com/questions/10803109/simple-makefile-for-compiling-a-shared-object-library-file"> Simple makefile for compiling a shared object library file </a> - Found on Stackoverflow (the library is written in C++, but the Makefile is adaptable to C with few modifications)</p>
]]></content>
  </entry>
  
</feed>
